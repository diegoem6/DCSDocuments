{"ast":null,"code":"var _jsxFileName = \"/Users/diegoricca/Documents/React/DCSDocuments/tagsdescriptions/src/components/tagsdescriptors/newTagDescriptor.js\";\nimport React, { Fragment, useState, useContext, useEffect } from 'react';\nimport tagDescriptorContext from '../../context/tagdescriptor/tagDescriptorContext';\nimport systemContext from '../../context/system/systemContext';\nimport SunEditor, { buttonList } from 'suneditor-react';\nimport 'suneditor/dist/css/suneditor.min.css'; // Import Sun Editor's CSS File\n\nimport alertContext from '../../context/alerts/alertContext';\nimport { Editor } from '@tinymce/tinymce-react'; //import Files from 'react-files'\n\nconst NewTagDescriptor = () => {\n  const tdContext = useContext(tagDescriptorContext);\n  const {\n    tagname_ok,\n    message,\n    createTagDescriptor,\n    tagdescriptor,\n    resetMessage,\n    updateTagDescriptor,\n    validateTagname\n  } = tdContext;\n  const sContext = useContext(systemContext);\n  const {\n    systemSelected\n  } = sContext;\n  const aContext = useContext(alertContext);\n  const {\n    showAlert\n  } = aContext;\n  const [tagname, setTagname] = useState('');\n  const [description, setDescription] = useState(''); // TODO: attachments\n  // const [attachments, setattachments] = useState({\n  //     files:[]\n  // })\n\n  const [icon, seticon] = useState('');\n  useEffect(() => {\n    if (tagdescriptor !== null && tagdescriptor.length > 0) {\n      const [currentTagDescriptor] = tagdescriptor;\n      setTagname(currentTagDescriptor.tagname);\n      setDescription(currentTagDescriptor.description);\n    } else {\n      setTagname('');\n      setDescription('');\n    } // eslint-disable-next-line\n\n  }, []);\n  useEffect(() => {\n    if (message) {\n      showAlert(message.msg, message.category);\n      console.log(message.category);\n\n      if (message.category === \"alerta-error\") {\n        seticon('-red');\n      } else {\n        seticon('');\n      }\n\n      resetMessage();\n    } // eslint-disable-next-line\n\n  }, [message]);\n  if (!systemSelected) return null;\n\n  const onChangeTagDescriptor = e => {\n    setTagname(e.target.value);\n  };\n\n  const onBlurTagDescriptor = e => {\n    if (!(tagdescriptor !== null && tagdescriptor.length > 0)) {\n      validateTagname(e.target.value);\n    }\n\n    seticon('');\n  };\n\n  const onChangeRichText = value => {\n    setDescription(value);\n  };\n\n  const onSubmitTagDescriptor = e => {\n    e.preventDefault(); //hacer validaciones y reseteo de form\n\n    if (tagname.trim() === '' || description.trim() === '') {\n      //alert(description.trim())\n      //alert(tagname.trim())\n      showAlert('Debe completar tagname y descripciÃ³n', 'alerta-error');\n      return;\n    } // llamo a agregar proyecto\n\n\n    let newTagDescriptor = {};\n    newTagDescriptor.tagname = tagname.toUpperCase();\n    newTagDescriptor.description = description;\n    newTagDescriptor.system = systemSelected._id; //TODO: attachmentss\n    //newTagDescriptor.attachments = attachments\n\n    if (tagdescriptor !== null && tagdescriptor.length > 0) {\n      const [currentTagDescriptor] = tagdescriptor;\n      newTagDescriptor._id = currentTagDescriptor._id;\n      updateTagDescriptor(newTagDescriptor);\n    } else {\n      if (tagname_ok === false) {\n        if (message) {\n          showAlert(message.msg, message.category);\n          resetMessage();\n        } else {\n          showAlert(\"El tag descriptor para ese tagname ya existe\", \"alerta-error\");\n        }\n\n        return;\n      }\n\n      createTagDescriptor(newTagDescriptor);\n    }\n  }; // TODO: attachments\n  // const onFilesChange = (files) => {\n  //     console.log(files)\n  //     console.log(files.type)\n  //     setattachments({...attachments,\n  //             files:files})\n  // }\n  // const onFilesError = (error, file) => {\n  //     console.log('error code ' + error.code + ': ' + error.message)\n  // }\n\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 17\n    }\n  }, \"Tag descriptor en el sistema: \", systemSelected.name), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"formDescriptor\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"descriptor\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    className: \"formulario-nuevo-proyecto\",\n    onSubmit: onSubmitTagDescriptor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: `input-text${icon}`,\n    placeholder: \"Tag name\",\n    name: \"tagname\",\n    value: tagname,\n    onChange: onChangeTagDescriptor,\n    readOnly: tagdescriptor !== null && tagdescriptor.length > 0,\n    onBlur: onBlurTagDescriptor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(SunEditor, {\n    placeholder: \"descripci\\xF3n del tag\",\n    name: \"description\",\n    setOptions: {\n      height: 300,\n      buttonList: buttonList.complex\n    },\n    setContents: description,\n    onChange: onChangeRichText,\n    showToolbar: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 29\n    }\n  }), tagdescriptor !== null && tagdescriptor.length > 0 ? /*#__PURE__*/React.createElement(\"input\", {\n    type: \"submit\",\n    className: \"btn btn-primario btn-block\",\n    value: \"Guardar Tag\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 34\n    }\n  }) : /*#__PURE__*/React.createElement(\"input\", {\n    type: \"submit\",\n    className: \"btn btn-primario btn-block\",\n    value: \"Agregar Tag\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 34\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"descriptorsRelated\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 25\n    }\n  }, \"Descriptores relacionados\"))));\n};\n\nexport default NewTagDescriptor;","map":{"version":3,"sources":["/Users/diegoricca/Documents/React/DCSDocuments/tagsdescriptions/src/components/tagsdescriptors/newTagDescriptor.js"],"names":["React","Fragment","useState","useContext","useEffect","tagDescriptorContext","systemContext","SunEditor","buttonList","alertContext","Editor","NewTagDescriptor","tdContext","tagname_ok","message","createTagDescriptor","tagdescriptor","resetMessage","updateTagDescriptor","validateTagname","sContext","systemSelected","aContext","showAlert","tagname","setTagname","description","setDescription","icon","seticon","length","currentTagDescriptor","msg","category","console","log","onChangeTagDescriptor","e","target","value","onBlurTagDescriptor","onChangeRichText","onSubmitTagDescriptor","preventDefault","trim","newTagDescriptor","toUpperCase","system","_id","name","height","complex"],"mappings":"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","sourcesContent":["import React,{Fragment, useState, useContext, useEffect} from 'react';\nimport tagDescriptorContext from '../../context/tagdescriptor/tagDescriptorContext' \nimport systemContext from '../../context/system/systemContext' \nimport SunEditor,{buttonList} from 'suneditor-react';\nimport 'suneditor/dist/css/suneditor.min.css'; // Import Sun Editor's CSS File\nimport alertContext from '../../context/alerts/alertContext';\nimport { Editor } from '@tinymce/tinymce-react';\n//import Files from 'react-files'\n\nconst NewTagDescriptor = () => {\n    \n    const tdContext = useContext(tagDescriptorContext)\n    const {tagname_ok, message, createTagDescriptor, tagdescriptor, resetMessage, updateTagDescriptor, validateTagname} = tdContext\n\n    const sContext = useContext(systemContext)\n    const {systemSelected} = sContext\n\n    const aContext = useContext(alertContext)\n    const {showAlert} = aContext\n\n\n    const [tagname, setTagname] = useState('')\n    const [description, setDescription] = useState('')\n    // TODO: attachments\n    // const [attachments, setattachments] = useState({\n    //     files:[]\n    // })\n    \n    const [icon, seticon] = useState('')\n      \n \n    useEffect(() => {\n        if (tagdescriptor !== null && tagdescriptor.length>0){\n            const [currentTagDescriptor] = tagdescriptor\n            setTagname(currentTagDescriptor.tagname)\n            setDescription(currentTagDescriptor.description)\n            \n        }else{\n            setTagname('')\n            setDescription('')\n        }\n        // eslint-disable-next-line\n    }, [])\n\n      \n    useEffect(() => {\n        if (message){\n            showAlert(message.msg,message.category)\n            console.log(message.category)\n            if(message.category===\"alerta-error\"){\n                seticon('-red')\n            }\n            else{\n                seticon('')\n            }\n            resetMessage();\n        }\n        // eslint-disable-next-line\n    }, [message])\n\n\n\n    if (!systemSelected) return null\n\n    const onChangeTagDescriptor = (e)=>{\n        setTagname(e.target.value)\n    }\n\n    const onBlurTagDescriptor = (e)=>{\n        if (!(tagdescriptor !== null && tagdescriptor.length>0)){\n            validateTagname (e.target.value);\n        }\n        seticon('')\n    }\n\n    const onChangeRichText = (value)=>{\n        setDescription(value)\n    }\n\n    const onSubmitTagDescriptor = (e)=>{\n        e.preventDefault();\n\n        //hacer validaciones y reseteo de form\n        if (tagname.trim() === '' || description.trim()===''){\n            //alert(description.trim())\n            //alert(tagname.trim())\n            showAlert('Debe completar tagname y descripciÃ³n','alerta-error')\n            return;\n        }\n\n        \n\n        // llamo a agregar proyecto\n        let newTagDescriptor = {}\n        newTagDescriptor.tagname = tagname.toUpperCase()\n        newTagDescriptor.description = description\n        newTagDescriptor.system = systemSelected._id\n        \n        \n        //TODO: attachmentss\n        //newTagDescriptor.attachments = attachments\n\n        if (tagdescriptor !== null && tagdescriptor.length>0){\n            const [currentTagDescriptor] = tagdescriptor\n            newTagDescriptor._id = currentTagDescriptor._id\n            updateTagDescriptor(newTagDescriptor)  \n        }else{\n            \n            if(tagname_ok === false){\n                \n                if (message){\n                    showAlert(message.msg,message.category)\n                    resetMessage()\n                }else{\n                    showAlert(\"El tag descriptor para ese tagname ya existe\",\"alerta-error\")\n                }\n                return;\n            }\n            createTagDescriptor(newTagDescriptor)\n\n        }\n    }\n\n    // TODO: attachments\n    // const onFilesChange = (files) => {\n    //     console.log(files)\n    //     console.log(files.type)\n    //     setattachments({...attachments,\n    //             files:files})\n    // }\n    \n    // const onFilesError = (error, file) => {\n    //     console.log('error code ' + error.code + ': ' + error.message)\n    // }\n    \n    return ( \n        <Fragment>\n                <h2>Tag descriptor en el sistema: {systemSelected.name}</h2>\n                <div className=\"formDescriptor\">\n                    <div className=\"descriptor\">\n                        <form   \n                            className=\"formulario-nuevo-proyecto\"\n                            onSubmit = {onSubmitTagDescriptor}\n                            >\n                            <input  \n                                type=\"text\"\n                                className={`input-text${icon}`}\n                                placeholder=\"Tag name\"\n                                name=\"tagname\"\n                                value ={tagname}\n                                onChange = {onChangeTagDescriptor}\n                                readOnly = {(tagdescriptor !== null && tagdescriptor.length>0)}\n                                onBlur = {onBlurTagDescriptor}\n                            />\n                            \n                            {/* TODO: cambio de editor */}\n                            <SunEditor \n                                placeholder=\"descripciÃ³n del tag\"\n                                name=\"description\"\n                                setOptions={{\n                                    height: 300,\n                                    buttonList: buttonList.complex \n                                }}\n                                setContents ={description}\n                                onChange = {onChangeRichText}\n                                showToolbar={true}\n                                \n                            /> \n                            \n                            {/* <Editor\n                                initialValue={description}\n                                tinymceScriptSrc='/public/js/tinymce/tinymce.min.js'\n                                init={{\n                                height: 500,\n                                menubar: 'file edit view insert format tools table help',\n                                plugins: [\n                                    'advlist autolink lists link image charmap print preview anchor',\n                                    'searchreplace visualblocks code fullscreen',\n                                    'insertdatetime media table paste code help wordcount'\n                                ],\n                                toolbar: 'undo redo | bold italic underline strikethrough | fontselect fontsizeselect formatselect | alignleft aligncenter alignright alignjustify | outdent indent |  numlist bullist | forecolor backcolor removeformat | pagebreak | charmap emoticons | fullscreen  preview save print | insertfile image media template link anchor codesample | ltr rtl',\n                                toolbar_sticky: true,\n                                paste_retain_style_properties: \"all\"\n                                }\n                                }\n                                onEditorChange={onChangeRichText}\n                            /> \n                            <Editor\n                                initialValue={description}\n                                apiKey='ak1az6sw8c9hjvqp8qt932v5wkgl29teq3qoys34bf11cjvo'\n                                tinymceScriptSrc='/js/tinymce/tinymce.min.js'\n                                init={{\n                                height: 500,\n                                menubar: 'file edit view insert format tools table help',\n                                plugins: [\n                                    'advlist autolink lists link image charmap print preview anchor',\n                                    'searchreplace visualblocks code fullscreen',\n                                    'insertdatetime media table paste code help wordcount'\n                                ],\n                                toolbar: 'undo redo | bold italic underline strikethrough | fontselect fontsizeselect formatselect | alignleft aligncenter alignright alignjustify | outdent indent |  numlist bullist | forecolor backcolor removeformat | pagebreak | charmap emoticons | fullscreen  preview save print | insertfile image media template link anchor codesample | ltr rtl',\n                                toolbar_sticky: true,\n                                paste_retain_style_properties: \"all\"\n                                }\n                                }\n                                onEditorChange={onChangeRichText}\n                            />\n                                */}\n\n\n                            {/* TODO: attachments \n                            <Files\n                                className='files-dropzone'\n                                onChange={onFilesChange}\n                                onError={onFilesError}\n                                accepts={['image/png', '.jpg', '.pdf', 'audio/*']}\n                                multiple\n                                maxFiles={3}\n                                maxFileSize={10000000}\n                                minFileSize={0}\n                                clickable\n                                >\n                                Drop files here or click to upload\n                            </Files>\n                            */}\n                            {(tagdescriptor !== null && tagdescriptor.length>0) ?\n                        \n                                (<input \n                                    type=\"submit\"\n                                    className=\"btn btn-primario btn-block\"\n                                    value = \"Guardar Tag\"\n                                /> )\n                                :\n                                (<input \n                                    type=\"submit\"\n                                    className=\"btn btn-primario btn-block\"\n                                    value = \"Agregar Tag\"\n                                /> )\n                            }\n                            \n                        </form>\n                    </div>\n                    <div className=\"descriptorsRelated\">\n                        <p>Descriptores relacionados</p>\n                    </div>\n                </div>\n                \n        </Fragment>\n     );\n}\n \nexport default NewTagDescriptor;"]},"metadata":{},"sourceType":"module"}