{"ast":null,"code":"var _jsxFileName = \"/Users/diegoricca/Documents/React/DCSDocuments/tagsdescriptions/src/context/tagdescriptor/tagDescriptorState.js\";\nimport React, { useReducer } from 'react';\nimport tagDescriptorContext from './tagDescriptorContext';\nimport tagDescriptorReducer from './tagDescriptorReducer';\nimport { FORM_TAGDESCRIPTOR, GET_TAGDESCRIPTOR, CREATE_TAGDESCRIPTOR, SHOW_ERROR_TAGDESCRIPTOR, UPDATE_TAGDESCRIPTOR, SELECT_TAGDESCRIPTOR, DESELECT_TAGDESCRIPTOR, GET_TAGSDESCRIPTORS, DELETE_TAGDESCRIPTOR, SEARCH_TAGSDESCRIPTORS } from '../../types/index';\nimport axiosClient from '../../config/axios';\n\nconst TagDescriptorState = props => {\n  const initialState = {\n    tagdescriptors: [],\n    searchtagdescriptors: [],\n    form: false,\n    error: false,\n    tagdescriptor: null,\n    message: null\n  }; //Dispatch para ejecutar las acciones\n\n  const [state, dispatch] = useReducer(tagDescriptorReducer, initialState); //defino las funciones para el CRUD de tagdescriptor\n\n  const showForm = () => {\n    dispatch({\n      type: FORM_TAGDESCRIPTOR\n    });\n  };\n\n  const getTagsDescriptors = async system => {\n    try {\n      const res = await axiosClient.get('/api/tagsdescriptors', {\n        params: {\n          system\n        }\n      });\n      dispatch({\n        type: GET_TAGSDESCRIPTORS,\n        payload: res.data.tagsdescriptors\n      });\n    } catch (error) {\n      const alert = {\n        msg: \"hubo un error buscando los tagdescriptors\",\n        category: \"alerta-error\"\n      };\n      dispatch({\n        type: SHOW_ERROR_TAGDESCRIPTOR,\n        payload: alert\n      });\n    }\n  };\n\n  const searchTagsDescriptors = async search => {\n    try {\n      console.log(search);\n      dispatch({\n        type: SEARCH_TAGSDESCRIPTORS,\n        payload: search\n      });\n    } catch (error) {\n      const alert = {\n        msg: \"hubo un error buscando los tagdescriptors\",\n        category: \"alerta-error\"\n      };\n      dispatch({\n        type: SHOW_ERROR_TAGDESCRIPTOR,\n        payload: alert\n      });\n    }\n  };\n\n  const getTagDescriptor = async id => {\n    try {\n      const res = await axiosClient.get(`/api/showtag/${id}`);\n      console.log(res);\n      dispatch({\n        type: GET_TAGDESCRIPTOR,\n        payload: res.data.tagdescriptor\n      });\n    } catch (error) {\n      const alert = {\n        msg: \"No existe el tag descriptor\",\n        category: \"alerta-error\"\n      };\n      dispatch({\n        type: SHOW_ERROR_TAGDESCRIPTOR,\n        payload: alert\n      });\n    }\n  };\n\n  const createTagDescriptor = async ptagdescriptor => {\n    try {\n      const res = await axiosClient.post('/api/tagsdescriptors', ptagdescriptor);\n      dispatch({\n        type: CREATE_TAGDESCRIPTOR,\n        payload: res.data\n      });\n    } catch (error) {\n      console.log(error.response.data.msg);\n      const alert = {\n        msg: error.response.data.msg,\n        categoria: \"alerta-error\"\n      };\n      dispatch({\n        type: SHOW_ERROR_TAGDESCRIPTOR,\n        payload: alert\n      });\n    }\n  };\n\n  const showError = () => {\n    dispatch({\n      type: SHOW_ERROR_TAGDESCRIPTOR\n    });\n  };\n\n  const selectTagDescriptor = id_tagdescriptor => {\n    dispatch({\n      type: SELECT_TAGDESCRIPTOR,\n      payload: id_tagdescriptor\n    });\n  };\n\n  const deselectTagDescriptor = id_tagdescriptor => {\n    dispatch({\n      type: DESELECT_TAGDESCRIPTOR\n    });\n  };\n\n  const deleteTagDescriptor = async idTagDescriptor => {\n    try {\n      await axiosClient.delete(`/api/tagsdescriptors/${idTagDescriptor}`);\n      dispatch({\n        type: DELETE_TAGDESCRIPTOR,\n        payload: idTagDescriptor\n      });\n    } catch (error) {\n      const alert = {\n        msg: \"hubo un error eliminando el tag descriptor\",\n        category: \"alerta-error\"\n      };\n      dispatch({\n        type: SHOW_ERROR_TAGDESCRIPTOR,\n        payload: alert\n      });\n    }\n  };\n\n  const updateTagDescriptor = async tagdescriptor => {\n    try {\n      const id = tagdescriptor._id;\n      const res = await axiosClient.put(`/api/tagsdescriptors/${id}`, tagdescriptor);\n      dispatch({\n        type: UPDATE_TAGDESCRIPTOR,\n        payload: res.data.tag_descriptor_modified\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(tagDescriptorContext.Provider, {\n    value: {\n      tagdescriptors: state.tagdescriptors,\n      form: state.form,\n      error: state.error,\n      tagdescriptor: state.tagdescriptor,\n      message: state.message,\n      searchtagdescriptors: state.searchtagdescriptors,\n      showForm,\n      getTagsDescriptors,\n      createTagDescriptor,\n      showError,\n      selectTagDescriptor,\n      deleteTagDescriptor,\n      getTagDescriptor,\n      deselectTagDescriptor,\n      updateTagDescriptor,\n      searchTagsDescriptors\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 9\n    }\n  }, props.children);\n};\n\nexport default TagDescriptorState;","map":{"version":3,"sources":["/Users/diegoricca/Documents/React/DCSDocuments/tagsdescriptions/src/context/tagdescriptor/tagDescriptorState.js"],"names":["React","useReducer","tagDescriptorContext","tagDescriptorReducer","FORM_TAGDESCRIPTOR","GET_TAGDESCRIPTOR","CREATE_TAGDESCRIPTOR","SHOW_ERROR_TAGDESCRIPTOR","UPDATE_TAGDESCRIPTOR","SELECT_TAGDESCRIPTOR","DESELECT_TAGDESCRIPTOR","GET_TAGSDESCRIPTORS","DELETE_TAGDESCRIPTOR","SEARCH_TAGSDESCRIPTORS","axiosClient","TagDescriptorState","props","initialState","tagdescriptors","searchtagdescriptors","form","error","tagdescriptor","message","state","dispatch","showForm","type","getTagsDescriptors","system","res","get","params","payload","data","tagsdescriptors","alert","msg","category","searchTagsDescriptors","search","console","log","getTagDescriptor","id","createTagDescriptor","ptagdescriptor","post","response","categoria","showError","selectTagDescriptor","id_tagdescriptor","deselectTagDescriptor","deleteTagDescriptor","idTagDescriptor","delete","updateTagDescriptor","_id","put","tag_descriptor_modified","children"],"mappings":"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","sourcesContent":["import React, {useReducer} from 'react';\nimport tagDescriptorContext from './tagDescriptorContext'\nimport tagDescriptorReducer from './tagDescriptorReducer'\nimport {\n    FORM_TAGDESCRIPTOR, \n    GET_TAGDESCRIPTOR,\n    CREATE_TAGDESCRIPTOR,\n    SHOW_ERROR_TAGDESCRIPTOR,\n    UPDATE_TAGDESCRIPTOR,\n    SELECT_TAGDESCRIPTOR,\n    DESELECT_TAGDESCRIPTOR,\n    GET_TAGSDESCRIPTORS,\n    DELETE_TAGDESCRIPTOR,\n    SEARCH_TAGSDESCRIPTORS} from '../../types/index'\n\nimport axiosClient from '../../config/axios'\n\n\nconst TagDescriptorState = props=>{\n    \n    \n    const initialState={\n        tagdescriptors : [],\n        searchtagdescriptors: [],\n        form:false,\n        error: false, \n        tagdescriptor: null,\n        message:null\n    }\n\n    //Dispatch para ejecutar las acciones\n    const [state,dispatch] = useReducer(tagDescriptorReducer, initialState)\n\n\n    //defino las funciones para el CRUD de tagdescriptor\n    const showForm =()=>{\n        dispatch({\n            type: FORM_TAGDESCRIPTOR\n        })\n    }\n\n    const getTagsDescriptors = async (system)=>{\n        try {\n            \n            const res = await axiosClient.get('/api/tagsdescriptors', {params:{system}});\n            dispatch({\n                type: GET_TAGSDESCRIPTORS,\n                payload: res.data.tagsdescriptors\n            })\n        } catch (error) {\n            const alert = {\n                msg:\"hubo un error buscando los tagdescriptors\",\n                category:\"alerta-error\"\n            }\n            dispatch({\n                type:SHOW_ERROR_TAGDESCRIPTOR,\n                payload: alert\n            })\n        }\n        \n    }\n\n    const searchTagsDescriptors = async (search)=>{\n        try {\n            console.log(search)\n            \n            dispatch({\n                type: SEARCH_TAGSDESCRIPTORS,\n                payload: search\n            })\n        } catch (error) {\n            const alert = {\n                msg:\"hubo un error buscando los tagdescriptors\",\n                category:\"alerta-error\"\n            }\n            dispatch({\n                type:SHOW_ERROR_TAGDESCRIPTOR,\n                payload: alert\n            })\n        }\n        \n    }\n\n    const getTagDescriptor = async (id)=>{\n        try {\n            \n            const res = await axiosClient.get(`/api/showtag/${id}`);\n            console.log(res)\n            dispatch({\n                type: GET_TAGDESCRIPTOR,\n                payload: res.data.tagdescriptor\n            })\n        } catch (error) {\n            const alert = {\n                msg:\"No existe el tag descriptor\",\n                category:\"alerta-error\"\n            }\n            dispatch({\n                type:SHOW_ERROR_TAGDESCRIPTOR,\n                payload: alert\n            })\n        }\n        \n    }\n\n    const createTagDescriptor = async ptagdescriptor =>{\n\n        try {\n            const res = await axiosClient.post('/api/tagsdescriptors',ptagdescriptor);\n            dispatch({\n                type: CREATE_TAGDESCRIPTOR,\n                payload: res.data\n            })\n            \n        } catch (error) {\n            console.log(error.response.data.msg)\n            const alert = {\n                msg:error.response.data.msg,\n                categoria:\"alerta-error\"\n            }\n            dispatch({\n                type:SHOW_ERROR_TAGDESCRIPTOR,\n                payload: alert\n            })\n        }\n        \n        \n    }\n\n    const showError = () =>{\n        dispatch({\n            type: SHOW_ERROR_TAGDESCRIPTOR\n        })\n    }\n\n    const selectTagDescriptor = (id_tagdescriptor) =>{\n        dispatch({\n            type: SELECT_TAGDESCRIPTOR,\n            payload:id_tagdescriptor\n        })\n    }\n\n    const deselectTagDescriptor = (id_tagdescriptor) =>{\n        dispatch({\n            type: DESELECT_TAGDESCRIPTOR\n        })\n    }\n\n    const deleteTagDescriptor = async (idTagDescriptor) =>{\n        try {\n            await axiosClient.delete(`/api/tagsdescriptors/${idTagDescriptor}`);\n            dispatch({\n                type:DELETE_TAGDESCRIPTOR,\n                payload:idTagDescriptor\n            })\n        } catch (error) {\n            const alert = {\n                msg:\"hubo un error eliminando el tag descriptor\",\n                category:\"alerta-error\"\n            }\n            dispatch({\n                type:SHOW_ERROR_TAGDESCRIPTOR,\n                payload: alert\n            })\n        }\n        \n       \n    }\n\n    const updateTagDescriptor = async (tagdescriptor) =>{\n        try {\n            const id = tagdescriptor._id\n            const res = await axiosClient.put(`/api/tagsdescriptors/${id}`,tagdescriptor)\n            \n            dispatch({\n                type:UPDATE_TAGDESCRIPTOR,\n                payload:res.data.tag_descriptor_modified\n            })\n            \n\n        } catch (error) {\n            console.log(error)\n\n        }\n    }\n\n    return (\n        <tagDescriptorContext.Provider\n            value={{\n                tagdescriptors: state.tagdescriptors,\n                form: state.form,\n                error: state.error,\n                tagdescriptor: state.tagdescriptor,\n                message: state.message,\n                searchtagdescriptors: state.searchtagdescriptors,\n                showForm, \n                getTagsDescriptors,\n                createTagDescriptor,\n                showError, \n                selectTagDescriptor,\n                deleteTagDescriptor,\n                getTagDescriptor,\n                deselectTagDescriptor,\n                updateTagDescriptor,\n                searchTagsDescriptors\n            }}\n        >\n\n            {props.children}\n        </tagDescriptorContext.Provider>\n    )\n\n}\n\nexport default TagDescriptorState;"]},"metadata":{},"sourceType":"module"}