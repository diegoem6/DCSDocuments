{"ast":null,"code":"var _jsxFileName = \"/Users/diegoricca/Documents/React/DCSDocuments/tagsdescriptions/src/context/tagdescriptor/tagDescriptorState.js\";\nimport React, { useReducer } from 'react';\nimport tagDescriptorContext from './tagDescriptorContext';\nimport tagDescriptorReducer from './tagDescriptorReducer';\nimport { FORM_TAGDESCRIPTOR, GET_TAGDESCRIPTOR, CREATE_TAGDESCRIPTOR, SHOW_ERROR_TAGDESCRIPTOR, UPDATE_TAGDESCRIPTOR, SELECT_TAGDESCRIPTOR, DESELECT_TAGDESCRIPTOR, GET_TAGSDESCRIPTORS, DELETE_TAGDESCRIPTOR, SEARCH_TAGSDESCRIPTORS, RESET_MESSAGE, VALIDATE_TAGDESCRIPTOR, INVALIDATE_TAGDESCRIPTOR } from '../../types/index';\nimport axiosClient from '../../config/axios';\n\nconst TagDescriptorState = props => {\n  const initialState = {\n    tagdescriptors: [],\n    searchtagdescriptors: [],\n    form: false,\n    tagname_ok: true,\n    tagdescriptor: null,\n    message: null\n  }; //Dispatch para ejecutar las acciones\n\n  const [state, dispatch] = useReducer(tagDescriptorReducer, initialState); //defino las funciones para el CRUD de tagdescriptor\n\n  const showForm = () => {\n    dispatch({\n      type: FORM_TAGDESCRIPTOR\n    });\n  };\n\n  const getTagsDescriptors = async system => {\n    try {\n      const res = await axiosClient.get('/api/tagsdescriptors', {\n        params: {\n          system\n        }\n      });\n      dispatch({\n        type: GET_TAGSDESCRIPTORS,\n        payload: res.data.tagsdescriptors\n      });\n    } catch (error) {\n      const alert = {\n        msg: \"hubo un error buscando los tagdescriptors\",\n        category: \"alerta-error\"\n      };\n      dispatch({\n        type: SHOW_ERROR_TAGDESCRIPTOR,\n        payload: alert\n      });\n    }\n  };\n\n  const searchTagsDescriptors = async search => {\n    try {\n      console.log(search);\n      dispatch({\n        type: SEARCH_TAGSDESCRIPTORS,\n        payload: search\n      });\n    } catch (error) {\n      const alert = {\n        msg: \"hubo un error buscando los tagdescriptors\",\n        category: \"alerta-error\"\n      };\n      dispatch({\n        type: SHOW_ERROR_TAGDESCRIPTOR,\n        payload: alert\n      });\n    }\n  };\n\n  const getTagDescriptor = async id => {\n    try {\n      const res = await axiosClient.get(`/api/showtag/${id}`);\n      console.log(res);\n      dispatch({\n        type: GET_TAGDESCRIPTOR,\n        payload: res.data.tagdescriptor\n      });\n    } catch (error) {\n      const alert = {\n        msg: \"No existe el tag descriptor\",\n        category: \"alerta-error\"\n      };\n      dispatch({\n        type: SHOW_ERROR_TAGDESCRIPTOR,\n        payload: alert\n      });\n    }\n  };\n\n  const resetMessage = () => {\n    dispatch({\n      type: RESET_MESSAGE\n    });\n  };\n\n  const createTagDescriptor = async ptagdescriptor => {\n    try {\n      const res = await axiosClient.post('/api/tagsdescriptors', ptagdescriptor);\n      dispatch({\n        type: CREATE_TAGDESCRIPTOR,\n        payload: res.data\n      });\n    } catch (error) {\n      const alert = {\n        msg: error.response.data.msg,\n        category: \"alerta-error\"\n      };\n      dispatch({\n        type: SHOW_ERROR_TAGDESCRIPTOR,\n        payload: alert\n      });\n    }\n  };\n\n  const showError = () => {\n    dispatch({\n      type: SHOW_ERROR_TAGDESCRIPTOR\n    });\n  };\n\n  const selectTagDescriptor = id_tagdescriptor => {\n    dispatch({\n      type: SELECT_TAGDESCRIPTOR,\n      payload: id_tagdescriptor\n    });\n  };\n\n  const deselectTagDescriptor = id_tagdescriptor => {\n    dispatch({\n      type: DESELECT_TAGDESCRIPTOR\n    });\n  };\n\n  const deleteTagDescriptor = async idTagDescriptor => {\n    try {\n      await axiosClient.delete(`/api/tagsdescriptors/${idTagDescriptor}`);\n      dispatch({\n        type: DELETE_TAGDESCRIPTOR,\n        payload: idTagDescriptor\n      });\n    } catch (error) {\n      const alert = {\n        msg: \"hubo un error eliminando el tag descriptor\",\n        category: \"alerta-error\"\n      };\n      dispatch({\n        type: SHOW_ERROR_TAGDESCRIPTOR,\n        payload: alert\n      });\n    }\n  };\n\n  const validateTagname = async id => {\n    try {\n      await axiosClient.get(`/api/showtag/${id}`);\n      const alert = {\n        msg: \"El tag descriptor para ese tagname ya existe\",\n        category: \"alerta-error\"\n      };\n      dispatch({\n        type: INVALIDATE_TAGDESCRIPTOR,\n        payload: alert\n      });\n    } catch (error) {\n      dispatch({\n        type: VALIDATE_TAGDESCRIPTOR\n      });\n    }\n  };\n\n  const updateTagDescriptor = async tagdescriptor => {\n    try {\n      const id = tagdescriptor._id;\n      const res = await axiosClient.put(`/api/tagsdescriptors/${id}`, tagdescriptor);\n      dispatch({\n        type: UPDATE_TAGDESCRIPTOR,\n        payload: res.data.tag_descriptor_modified\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(tagDescriptorContext.Provider, {\n    value: {\n      tagdescriptors: state.tagdescriptors,\n      form: state.form,\n      error: state.error,\n      tagdescriptor: state.tagdescriptor,\n      message: state.message,\n      searchtagdescriptors: state.searchtagdescriptors,\n      tagname_ok: state.tagname_ok,\n      showForm,\n      getTagsDescriptors,\n      createTagDescriptor,\n      showError,\n      selectTagDescriptor,\n      deleteTagDescriptor,\n      getTagDescriptor,\n      deselectTagDescriptor,\n      updateTagDescriptor,\n      searchTagsDescriptors,\n      resetMessage,\n      validateTagname\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 9\n    }\n  }, props.children);\n};\n\nexport default TagDescriptorState;","map":{"version":3,"sources":["/Users/diegoricca/Documents/React/DCSDocuments/tagsdescriptions/src/context/tagdescriptor/tagDescriptorState.js"],"names":["React","useReducer","tagDescriptorContext","tagDescriptorReducer","FORM_TAGDESCRIPTOR","GET_TAGDESCRIPTOR","CREATE_TAGDESCRIPTOR","SHOW_ERROR_TAGDESCRIPTOR","UPDATE_TAGDESCRIPTOR","SELECT_TAGDESCRIPTOR","DESELECT_TAGDESCRIPTOR","GET_TAGSDESCRIPTORS","DELETE_TAGDESCRIPTOR","SEARCH_TAGSDESCRIPTORS","RESET_MESSAGE","VALIDATE_TAGDESCRIPTOR","INVALIDATE_TAGDESCRIPTOR","axiosClient","TagDescriptorState","props","initialState","tagdescriptors","searchtagdescriptors","form","tagname_ok","tagdescriptor","message","state","dispatch","showForm","type","getTagsDescriptors","system","res","get","params","payload","data","tagsdescriptors","error","alert","msg","category","searchTagsDescriptors","search","console","log","getTagDescriptor","id","resetMessage","createTagDescriptor","ptagdescriptor","post","response","showError","selectTagDescriptor","id_tagdescriptor","deselectTagDescriptor","deleteTagDescriptor","idTagDescriptor","delete","validateTagname","updateTagDescriptor","_id","put","tag_descriptor_modified","children"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,UAAf,QAAgC,OAAhC;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;AACA,SACIC,kBADJ,EAEIC,iBAFJ,EAGIC,oBAHJ,EAIIC,wBAJJ,EAKIC,oBALJ,EAMIC,oBANJ,EAOIC,sBAPJ,EAQIC,mBARJ,EASIC,oBATJ,EAUIC,sBAVJ,EAWIC,aAXJ,EAYIC,sBAZJ,EAaIC,wBAbJ,QAamC,mBAbnC;AAeA,OAAOC,WAAP,MAAwB,oBAAxB;;AAGA,MAAMC,kBAAkB,GAAGC,KAAK,IAAE;AAG9B,QAAMC,YAAY,GAAC;AACfC,IAAAA,cAAc,EAAG,EADF;AAEfC,IAAAA,oBAAoB,EAAE,EAFP;AAGfC,IAAAA,IAAI,EAAC,KAHU;AAIfC,IAAAA,UAAU,EAAE,IAJG;AAKfC,IAAAA,aAAa,EAAE,IALA;AAMfC,IAAAA,OAAO,EAAC;AANO,GAAnB,CAH8B,CAY9B;;AACA,QAAM,CAACC,KAAD,EAAOC,QAAP,IAAmB3B,UAAU,CAACE,oBAAD,EAAuBiB,YAAvB,CAAnC,CAb8B,CAgB9B;;AACA,QAAMS,QAAQ,GAAE,MAAI;AAChBD,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAE1B;AADD,KAAD,CAAR;AAGH,GAJD;;AAMA,QAAM2B,kBAAkB,GAAG,MAAOC,MAAP,IAAgB;AACvC,QAAI;AAEA,YAAMC,GAAG,GAAG,MAAMhB,WAAW,CAACiB,GAAZ,CAAgB,sBAAhB,EAAwC;AAACC,QAAAA,MAAM,EAAC;AAACH,UAAAA;AAAD;AAAR,OAAxC,CAAlB;AACAJ,MAAAA,QAAQ,CAAC;AACLE,QAAAA,IAAI,EAAEnB,mBADD;AAELyB,QAAAA,OAAO,EAAEH,GAAG,CAACI,IAAJ,CAASC;AAFb,OAAD,CAAR;AAIH,KAPD,CAOE,OAAOC,KAAP,EAAc;AACZ,YAAMC,KAAK,GAAG;AACVC,QAAAA,GAAG,EAAC,2CADM;AAEVC,QAAAA,QAAQ,EAAC;AAFC,OAAd;AAIAd,MAAAA,QAAQ,CAAC;AACLE,QAAAA,IAAI,EAACvB,wBADA;AAEL6B,QAAAA,OAAO,EAAEI;AAFJ,OAAD,CAAR;AAIH;AAEJ,GAnBD;;AAqBA,QAAMG,qBAAqB,GAAG,MAAOC,MAAP,IAAgB;AAC1C,QAAI;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AAEAhB,MAAAA,QAAQ,CAAC;AACLE,QAAAA,IAAI,EAAEjB,sBADD;AAELuB,QAAAA,OAAO,EAAEQ;AAFJ,OAAD,CAAR;AAIH,KAPD,CAOE,OAAOL,KAAP,EAAc;AACZ,YAAMC,KAAK,GAAG;AACVC,QAAAA,GAAG,EAAC,2CADM;AAEVC,QAAAA,QAAQ,EAAC;AAFC,OAAd;AAIAd,MAAAA,QAAQ,CAAC;AACLE,QAAAA,IAAI,EAACvB,wBADA;AAEL6B,QAAAA,OAAO,EAAEI;AAFJ,OAAD,CAAR;AAIH;AAEJ,GAnBD;;AAqBA,QAAMO,gBAAgB,GAAG,MAAOC,EAAP,IAAY;AACjC,QAAI;AAEA,YAAMf,GAAG,GAAG,MAAMhB,WAAW,CAACiB,GAAZ,CAAiB,gBAAec,EAAG,EAAnC,CAAlB;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAYb,GAAZ;AACAL,MAAAA,QAAQ,CAAC;AACLE,QAAAA,IAAI,EAAEzB,iBADD;AAEL+B,QAAAA,OAAO,EAAEH,GAAG,CAACI,IAAJ,CAASZ;AAFb,OAAD,CAAR;AAIH,KARD,CAQE,OAAOc,KAAP,EAAc;AACZ,YAAMC,KAAK,GAAG;AACVC,QAAAA,GAAG,EAAC,6BADM;AAEVC,QAAAA,QAAQ,EAAC;AAFC,OAAd;AAIAd,MAAAA,QAAQ,CAAC;AACLE,QAAAA,IAAI,EAACvB,wBADA;AAEL6B,QAAAA,OAAO,EAAEI;AAFJ,OAAD,CAAR;AAIH;AAEJ,GApBD;;AAsBA,QAAMS,YAAY,GAAG,MAAI;AACrBrB,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAChB;AADA,KAAD,CAAR;AAGH,GAJD;;AAKA,QAAMoC,mBAAmB,GAAG,MAAMC,cAAN,IAAuB;AAE/C,QAAI;AAEA,YAAMlB,GAAG,GAAG,MAAMhB,WAAW,CAACmC,IAAZ,CAAiB,sBAAjB,EAAwCD,cAAxC,CAAlB;AACAvB,MAAAA,QAAQ,CAAC;AACLE,QAAAA,IAAI,EAAExB,oBADD;AAEL8B,QAAAA,OAAO,EAAEH,GAAG,CAACI;AAFR,OAAD,CAAR;AAMH,KATD,CASE,OAAOE,KAAP,EAAc;AACZ,YAAMC,KAAK,GAAG;AACVC,QAAAA,GAAG,EAACF,KAAK,CAACc,QAAN,CAAehB,IAAf,CAAoBI,GADd;AAEVC,QAAAA,QAAQ,EAAC;AAFC,OAAd;AAIAd,MAAAA,QAAQ,CAAC;AACLE,QAAAA,IAAI,EAACvB,wBADA;AAEL6B,QAAAA,OAAO,EAAEI;AAFJ,OAAD,CAAR;AAIH;AAGJ,GAvBD;;AAyBA,QAAMc,SAAS,GAAG,MAAK;AACnB1B,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEvB;AADD,KAAD,CAAR;AAGH,GAJD;;AAMA,QAAMgD,mBAAmB,GAAIC,gBAAD,IAAqB;AAC7C5B,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAErB,oBADD;AAEL2B,MAAAA,OAAO,EAACoB;AAFH,KAAD,CAAR;AAIH,GALD;;AAOA,QAAMC,qBAAqB,GAAID,gBAAD,IAAqB;AAC/C5B,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEpB;AADD,KAAD,CAAR;AAGH,GAJD;;AAMA,QAAMgD,mBAAmB,GAAG,MAAOC,eAAP,IAA0B;AAClD,QAAI;AACA,YAAM1C,WAAW,CAAC2C,MAAZ,CAAoB,wBAAuBD,eAAgB,EAA3D,CAAN;AACA/B,MAAAA,QAAQ,CAAC;AACLE,QAAAA,IAAI,EAAClB,oBADA;AAELwB,QAAAA,OAAO,EAACuB;AAFH,OAAD,CAAR;AAIH,KAND,CAME,OAAOpB,KAAP,EAAc;AACZ,YAAMC,KAAK,GAAG;AACVC,QAAAA,GAAG,EAAC,4CADM;AAEVC,QAAAA,QAAQ,EAAC;AAFC,OAAd;AAIAd,MAAAA,QAAQ,CAAC;AACLE,QAAAA,IAAI,EAACvB,wBADA;AAEL6B,QAAAA,OAAO,EAAEI;AAFJ,OAAD,CAAR;AAIH;AAGJ,GAnBD;;AAqBA,QAAMqB,eAAe,GAAG,MAAOb,EAAP,IAAa;AACjC,QAAI;AACA,YAAM/B,WAAW,CAACiB,GAAZ,CAAiB,gBAAec,EAAG,EAAnC,CAAN;AACA,YAAMR,KAAK,GAAG;AACVC,QAAAA,GAAG,EAAC,8CADM;AAEVC,QAAAA,QAAQ,EAAC;AAFC,OAAd;AAIAd,MAAAA,QAAQ,CAAC;AACLE,QAAAA,IAAI,EAAEd,wBADD;AAELoB,QAAAA,OAAO,EAAEI;AAFJ,OAAD,CAAR;AAIH,KAVD,CAUE,OAAOD,KAAP,EAAc;AACZX,MAAAA,QAAQ,CAAC;AACLE,QAAAA,IAAI,EAACf;AADA,OAAD,CAAR;AAGH;AACJ,GAhBD;;AAkBA,QAAM+C,mBAAmB,GAAG,MAAOrC,aAAP,IAAwB;AAChD,QAAI;AACA,YAAMuB,EAAE,GAAGvB,aAAa,CAACsC,GAAzB;AACA,YAAM9B,GAAG,GAAG,MAAMhB,WAAW,CAAC+C,GAAZ,CAAiB,wBAAuBhB,EAAG,EAA3C,EAA6CvB,aAA7C,CAAlB;AAEAG,MAAAA,QAAQ,CAAC;AACLE,QAAAA,IAAI,EAACtB,oBADA;AAEL4B,QAAAA,OAAO,EAACH,GAAG,CAACI,IAAJ,CAAS4B;AAFZ,OAAD,CAAR;AAMH,KAVD,CAUE,OAAO1B,KAAP,EAAc;AACZM,MAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ;AAEH;AACJ,GAfD;;AAiBA,sBACI,oBAAC,oBAAD,CAAsB,QAAtB;AACI,IAAA,KAAK,EAAE;AACHlB,MAAAA,cAAc,EAAEM,KAAK,CAACN,cADnB;AAEHE,MAAAA,IAAI,EAAEI,KAAK,CAACJ,IAFT;AAGHgB,MAAAA,KAAK,EAAEZ,KAAK,CAACY,KAHV;AAIHd,MAAAA,aAAa,EAAEE,KAAK,CAACF,aAJlB;AAKHC,MAAAA,OAAO,EAAEC,KAAK,CAACD,OALZ;AAMHJ,MAAAA,oBAAoB,EAAEK,KAAK,CAACL,oBANzB;AAOHE,MAAAA,UAAU,EAACG,KAAK,CAACH,UAPd;AAQHK,MAAAA,QARG;AASHE,MAAAA,kBATG;AAUHmB,MAAAA,mBAVG;AAWHI,MAAAA,SAXG;AAYHC,MAAAA,mBAZG;AAaHG,MAAAA,mBAbG;AAcHX,MAAAA,gBAdG;AAeHU,MAAAA,qBAfG;AAgBHK,MAAAA,mBAhBG;AAiBHnB,MAAAA,qBAjBG;AAkBHM,MAAAA,YAlBG;AAmBHY,MAAAA;AAnBG,KADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAwBK1C,KAAK,CAAC+C,QAxBX,CADJ;AA6BH,CA7ND;;AA+NA,eAAehD,kBAAf","sourcesContent":["import React, {useReducer} from 'react';\nimport tagDescriptorContext from './tagDescriptorContext'\nimport tagDescriptorReducer from './tagDescriptorReducer'\nimport {\n    FORM_TAGDESCRIPTOR, \n    GET_TAGDESCRIPTOR,\n    CREATE_TAGDESCRIPTOR,\n    SHOW_ERROR_TAGDESCRIPTOR,\n    UPDATE_TAGDESCRIPTOR,\n    SELECT_TAGDESCRIPTOR,\n    DESELECT_TAGDESCRIPTOR,\n    GET_TAGSDESCRIPTORS,\n    DELETE_TAGDESCRIPTOR,\n    SEARCH_TAGSDESCRIPTORS,\n    RESET_MESSAGE,\n    VALIDATE_TAGDESCRIPTOR,\n    INVALIDATE_TAGDESCRIPTOR} from '../../types/index'\n\nimport axiosClient from '../../config/axios'\n\n\nconst TagDescriptorState = props=>{\n    \n    \n    const initialState={\n        tagdescriptors : [],\n        searchtagdescriptors: [],\n        form:false,\n        tagname_ok: true, \n        tagdescriptor: null,\n        message:null\n    }\n\n    //Dispatch para ejecutar las acciones\n    const [state,dispatch] = useReducer(tagDescriptorReducer, initialState)\n\n\n    //defino las funciones para el CRUD de tagdescriptor\n    const showForm =()=>{\n        dispatch({\n            type: FORM_TAGDESCRIPTOR\n        })\n    }\n\n    const getTagsDescriptors = async (system)=>{\n        try {\n            \n            const res = await axiosClient.get('/api/tagsdescriptors', {params:{system}});\n            dispatch({\n                type: GET_TAGSDESCRIPTORS,\n                payload: res.data.tagsdescriptors\n            })\n        } catch (error) {\n            const alert = {\n                msg:\"hubo un error buscando los tagdescriptors\",\n                category:\"alerta-error\"\n            }\n            dispatch({\n                type:SHOW_ERROR_TAGDESCRIPTOR,\n                payload: alert\n            })\n        }\n        \n    }\n\n    const searchTagsDescriptors = async (search)=>{\n        try {\n            console.log(search)\n            \n            dispatch({\n                type: SEARCH_TAGSDESCRIPTORS,\n                payload: search\n            })\n        } catch (error) {\n            const alert = {\n                msg:\"hubo un error buscando los tagdescriptors\",\n                category:\"alerta-error\"\n            }\n            dispatch({\n                type:SHOW_ERROR_TAGDESCRIPTOR,\n                payload: alert\n            })\n        }\n        \n    }\n\n    const getTagDescriptor = async (id)=>{\n        try {\n            \n            const res = await axiosClient.get(`/api/showtag/${id}`);\n            console.log(res)\n            dispatch({\n                type: GET_TAGDESCRIPTOR,\n                payload: res.data.tagdescriptor\n            })\n        } catch (error) {\n            const alert = {\n                msg:\"No existe el tag descriptor\",\n                category:\"alerta-error\"\n            }\n            dispatch({\n                type:SHOW_ERROR_TAGDESCRIPTOR,\n                payload: alert\n            })\n        }\n        \n    }\n\n    const resetMessage = ()=>{\n        dispatch({\n            type:RESET_MESSAGE\n        })\n    }\n    const createTagDescriptor = async ptagdescriptor =>{\n\n        try {\n            \n            const res = await axiosClient.post('/api/tagsdescriptors',ptagdescriptor);\n            dispatch({\n                type: CREATE_TAGDESCRIPTOR,\n                payload: res.data\n            })\n            \n            \n        } catch (error) {\n            const alert = {\n                msg:error.response.data.msg,\n                category:\"alerta-error\"\n            }\n            dispatch({\n                type:SHOW_ERROR_TAGDESCRIPTOR,\n                payload: alert\n            })\n        }\n        \n        \n    }\n\n    const showError = () =>{\n        dispatch({\n            type: SHOW_ERROR_TAGDESCRIPTOR\n        })\n    }\n\n    const selectTagDescriptor = (id_tagdescriptor) =>{\n        dispatch({\n            type: SELECT_TAGDESCRIPTOR,\n            payload:id_tagdescriptor\n        })\n    }\n\n    const deselectTagDescriptor = (id_tagdescriptor) =>{\n        dispatch({\n            type: DESELECT_TAGDESCRIPTOR\n        })\n    }\n\n    const deleteTagDescriptor = async (idTagDescriptor) =>{\n        try {\n            await axiosClient.delete(`/api/tagsdescriptors/${idTagDescriptor}`);\n            dispatch({\n                type:DELETE_TAGDESCRIPTOR,\n                payload:idTagDescriptor\n            })\n        } catch (error) {\n            const alert = {\n                msg:\"hubo un error eliminando el tag descriptor\",\n                category:\"alerta-error\"\n            }\n            dispatch({\n                type:SHOW_ERROR_TAGDESCRIPTOR,\n                payload: alert\n            })\n        }\n        \n       \n    }\n\n    const validateTagname = async (id) =>{\n        try {\n            await axiosClient.get(`/api/showtag/${id}`);\n            const alert = {\n                msg:\"El tag descriptor para ese tagname ya existe\",\n                category:\"alerta-error\"\n            }\n            dispatch({\n                type: INVALIDATE_TAGDESCRIPTOR,\n                payload: alert\n            })\n        } catch (error) {\n            dispatch({\n                type:VALIDATE_TAGDESCRIPTOR\n            })\n        }\n    }\n\n    const updateTagDescriptor = async (tagdescriptor) =>{\n        try {\n            const id = tagdescriptor._id\n            const res = await axiosClient.put(`/api/tagsdescriptors/${id}`,tagdescriptor)\n            \n            dispatch({\n                type:UPDATE_TAGDESCRIPTOR,\n                payload:res.data.tag_descriptor_modified\n            })\n            \n\n        } catch (error) {\n            console.log(error)\n\n        }\n    }\n\n    return (\n        <tagDescriptorContext.Provider\n            value={{\n                tagdescriptors: state.tagdescriptors,\n                form: state.form,\n                error: state.error,\n                tagdescriptor: state.tagdescriptor,\n                message: state.message,\n                searchtagdescriptors: state.searchtagdescriptors,\n                tagname_ok:state.tagname_ok,\n                showForm, \n                getTagsDescriptors,\n                createTagDescriptor,\n                showError, \n                selectTagDescriptor,\n                deleteTagDescriptor,\n                getTagDescriptor,\n                deselectTagDescriptor,\n                updateTagDescriptor,\n                searchTagsDescriptors,\n                resetMessage,\n                validateTagname\n            }}\n        >\n\n            {props.children}\n        </tagDescriptorContext.Provider>\n    )\n\n}\n\nexport default TagDescriptorState;"]},"metadata":{},"sourceType":"module"}