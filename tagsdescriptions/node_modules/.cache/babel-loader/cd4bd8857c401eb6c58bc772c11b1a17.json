{"ast":null,"code":"var _jsxFileName = \"/Users/diegoricca/Documents/React/DCSDocuments/tagsdescriptions/src/components/tagsdescriptors/newTagDescriptor.js\";\nimport React, { Fragment, useState, useContext, useEffect } from 'react';\nimport tagDescriptorContext from '../../context/tagdescriptor/tagDescriptorContext';\nimport systemContext from '../../context/system/systemContext';\nimport SunEditor from 'suneditor-react';\nimport 'suneditor/dist/css/suneditor.min.css'; // Import Sun Editor's CSS File\n\nimport { UPDATE_TAGDESCRIPTOR } from '../../types';\nimport alertContext from '../../context/alerts/alertContext';\n\nconst NewTagDescriptor = () => {\n  const tdContext = useContext(tagDescriptorContext);\n  const {\n    error,\n    message,\n    createTagDescriptor,\n    showError,\n    tagdescriptor,\n    updateTagDescriptor,\n    validateTagDescription\n  } = tdContext;\n  const sContext = useContext(systemContext);\n  const {\n    systemSelected\n  } = sContext;\n  const aContext = useContext(alertContext);\n  const {\n    alert,\n    showAlert\n  } = aContext;\n  const [tagname, setTagname] = useState('');\n  const [description, setDescription] = useState('');\n  useEffect(() => {\n    if (error) {\n      console.log(\"en el effect\");\n      showAlert(message.msg, message.category);\n      validateTagDescription();\n    }\n  }, [error]);\n  useEffect(() => {\n    if (tagdescriptor !== null && tagdescriptor.length > 0) {\n      const [currentTagDescriptor] = tagdescriptor;\n      setTagname(currentTagDescriptor.tagname);\n      setDescription(currentTagDescriptor.description);\n    } else {\n      setTagname('');\n      setDescription('');\n    }\n  }, []);\n  if (!systemSelected) return null;\n\n  const onChangeTagDescriptor = e => {\n    setTagname(e.target.value);\n  };\n\n  const onChangeRichText = value => {\n    setDescription(value);\n  };\n\n  const onSubmitTagDescriptor = e => {\n    e.preventDefault(); //hacer validaciones y reseteo de form\n\n    if (tagname.trim() === '' || description.trim() === '') {\n      //alert(description.trim())\n      //alert(tagname.trim())\n      showError();\n      return;\n    } // llamo a agregar proyecto\n\n\n    let newTagDescriptor = {};\n    newTagDescriptor.tagname = tagname;\n    newTagDescriptor.description = description;\n    newTagDescriptor.system = systemSelected._id;\n\n    if (tagdescriptor !== null && tagdescriptor.length > 0) {\n      const [currentTagDescriptor] = tagdescriptor;\n      newTagDescriptor._id = currentTagDescriptor._id;\n      updateTagDescriptor(newTagDescriptor);\n    } else {\n      createTagDescriptor(newTagDescriptor);\n    }\n\n    setDescription(\"\");\n    setTagname(\"\");\n  };\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, alert ? /*#__PURE__*/React.createElement(\"div\", {\n    className: `alerta ${alert.category}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 26\n    }\n  }, alert.msg, \" \") : null, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }\n  }, \"Nuevo tags descriptor en el sistema: \", systemSelected.name), /*#__PURE__*/React.createElement(\"form\", {\n    className: \"formulario-nuevo-proyecto\",\n    onSubmit: onSubmitTagDescriptor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: \"input-text\",\n    placeholder: \"Tag name\",\n    name: \"tagname\",\n    value: tagname,\n    onChange: onChangeTagDescriptor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(SunEditor, {\n    placeholder: \"descripci\\xF3n del tag\",\n    name: \"description\",\n    setOptions: {\n      height: 300\n    },\n    setContents: description,\n    onChange: onChangeRichText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 25\n    }\n  }), tagdescriptor !== null && tagdescriptor.length > 0 ? /*#__PURE__*/React.createElement(\"input\", {\n    type: \"submit\",\n    className: \"btn btn-primario btn-block\",\n    value: \"Guardar Tag\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 30\n    }\n  }) : /*#__PURE__*/React.createElement(\"input\", {\n    type: \"submit\",\n    className: \"btn btn-primario btn-block\",\n    value: \"Agregar Tag\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 30\n    }\n  })));\n};\n\nexport default NewTagDescriptor;","map":{"version":3,"sources":["/Users/diegoricca/Documents/React/DCSDocuments/tagsdescriptions/src/components/tagsdescriptors/newTagDescriptor.js"],"names":["React","Fragment","useState","useContext","useEffect","tagDescriptorContext","systemContext","SunEditor","UPDATE_TAGDESCRIPTOR","alertContext","NewTagDescriptor","tdContext","error","message","createTagDescriptor","showError","tagdescriptor","updateTagDescriptor","validateTagDescription","sContext","systemSelected","aContext","alert","showAlert","tagname","setTagname","description","setDescription","console","log","msg","category","length","currentTagDescriptor","onChangeTagDescriptor","e","target","value","onChangeRichText","onSubmitTagDescriptor","preventDefault","trim","newTagDescriptor","system","_id","name","height"],"mappings":"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","sourcesContent":["import React,{Fragment, useState, useContext, useEffect} from 'react';\nimport tagDescriptorContext from '../../context/tagdescriptor/tagDescriptorContext' \nimport systemContext from '../../context/system/systemContext' \nimport SunEditor from 'suneditor-react';\nimport 'suneditor/dist/css/suneditor.min.css'; // Import Sun Editor's CSS File\nimport { UPDATE_TAGDESCRIPTOR } from '../../types';\nimport alertContext from '../../context/alerts/alertContext';\n\nconst NewTagDescriptor = () => {\n    \n    const tdContext = useContext(tagDescriptorContext)\n    const {error, message, createTagDescriptor, showError, tagdescriptor, updateTagDescriptor, validateTagDescription} = tdContext\n\n    const sContext = useContext(systemContext)\n    const {systemSelected} = sContext\n\n    const aContext = useContext(alertContext)\n    const {alert,showAlert} = aContext\n\n\n    const [tagname, setTagname] = useState('')\n    const [description, setDescription] = useState('')\n    \n        \n    useEffect(() => {\n        if (error){\n            console.log(\"en el effect\")\n            showAlert(message.msg,message.category)\n            validateTagDescription();\n            \n        }\n    }, [error])\n \n    useEffect(() => {\n        \n        if (tagdescriptor !== null && tagdescriptor.length>0){\n            const [currentTagDescriptor] = tagdescriptor\n            setTagname(currentTagDescriptor.tagname)\n            setDescription(currentTagDescriptor.description)\n            \n        }else{\n            setTagname('')\n            setDescription('')\n        }\n    }, [])\n\n    if (!systemSelected) return null\n\n    const onChangeTagDescriptor = (e)=>{\n        setTagname(e.target.value)\n    }\n\n    const onChangeRichText = (value)=>{\n        setDescription(value)\n    }\n\n    const onSubmitTagDescriptor = (e)=>{\n        e.preventDefault();\n\n        //hacer validaciones y reseteo de form\n        if (tagname.trim() === '' || description.trim()===''){\n            //alert(description.trim())\n            //alert(tagname.trim())\n            showError()\n            return;\n        }\n\n        // llamo a agregar proyecto\n        let newTagDescriptor = {}\n        newTagDescriptor.tagname = tagname\n        newTagDescriptor.description = description\n        newTagDescriptor.system = systemSelected._id\n        \n\n        if (tagdescriptor !== null && tagdescriptor.length>0){\n            const [currentTagDescriptor] = tagdescriptor\n            newTagDescriptor._id = currentTagDescriptor._id\n            updateTagDescriptor(newTagDescriptor)    \n        }else{\n            createTagDescriptor(newTagDescriptor)\n        }\n        \n        setDescription(\"\")\n        setTagname(\"\")\n    }\n    return ( \n        <Fragment>\n                {alert? (<div className={`alerta ${alert.category}`}>{alert.msg} </div>)\n                    :null}\n                <h2>Nuevo tags descriptor en el sistema: {systemSelected.name}</h2>\n                    \n                    <form   \n                        className=\"formulario-nuevo-proyecto\"\n                        onSubmit = {onSubmitTagDescriptor}\n                        >\n                        <input  \n                            type=\"text\"\n                            className=\"input-text\"\n                            placeholder=\"Tag name\"\n                            name=\"tagname\"\n                            value ={tagname}\n                            onChange = {onChangeTagDescriptor}\n                        />\n                        \n                        <SunEditor \n                            placeholder=\"descripción del tag\"\n                            name=\"description\"\n                            setOptions={{\n                                height: 300}}\n                            setContents ={description}\n                            onChange = {onChangeRichText}\n                        /> \n                        {/* <textarea \n                            name=\"description\"\n                            value ={description}\n                            onChange = {onChangeTagDescriptor}\n                        > \n\n                        </textarea>*/}\n                        {(tagdescriptor !== null && tagdescriptor.length>0) ?\n                    \n                            (<input \n                                type=\"submit\"\n                                className=\"btn btn-primario btn-block\"\n                                value = \"Guardar Tag\"\n                            /> )\n                            :\n                            (<input \n                                type=\"submit\"\n                                className=\"btn btn-primario btn-block\"\n                                value = \"Agregar Tag\"\n                            /> )\n                        }\n                          \n                    </form>\n                \n        </Fragment>\n     );\n}\n \nexport default NewTagDescriptor;"]},"metadata":{},"sourceType":"module"}